#include chopit.sdf;

proc (0) = printChopit(dset, struct chopitControl cCtl, struct chopitOut cOut);
    local mu, gama, gama_all, gama_se, gama_t, OP_vars, me_lab, se_lab;
    
    // Ceate output file
    if cCtl.output_file;
        if cCtl.exp_mu == 1;
            output file = "Perachi_J4_ammended_exp_V3.out" reset;
        else;
            output file = "Perachi_J4_linear_exp.out" reset;
        endif;
    endif;
    
    output on;
    
    format 15,4;
    "               SELF-ASSESSED HEALTH (C)CHOPIT MODEL";
    print;
    "DATE IS";;
    datestring(0);
    print;
    
    if cCtl.exp_mu == 1;
        "LINEAR THRESHOLDS FOR HOPIT VARIANTS";
    else;
        "EXPONENTIAL THRESHOLDS FOR HOPIT VARIANTS";
    endif;
    
    "DESCRIPTIVE STATISTICS: SAH DATA";
    dstatmt(dset);
    print;
    
    " No. of vignettes used";;
    cCtl.kv;
    print;
    
    "Sample Proportions of Y";
    print;
    cOut.phat;
    
    if cCtl.exp_mu eq 1;
        
        "LM TEST FOR RC AND VE";
        "Test, df's and p-value (reject null HOPIT model for large test values and/or small p-value)";
      print;
        cOut.LM_test[1, .];
      print;
        "LM TEST FOR VE";
        "Test, df's and p-value (reject null HOPIT model for large test values and/or small p-value)";
      print;
        cOut.LM_test[2, .];
      print;
        "LM TEST FOR RC";
        "Test, df's and p-value (reject null HOPIT model for large test values and/or small p-value)";
      print;
        cOut.LM_test[3, .];
        
    endif;
    print;
    "AVERAGE PROBABILITIES";

    if cCtl.mtype eq 1;
        meanc(cOut.pord_p);
    elseif cCtl.mtype eq 2;
        meanc(cOut.pord_p)~meanc(cOut.p_HOPIT);
    endif;
    print;
    
    "SUMMARIES OF INFORMATION CRITERIA (BIC, AIC, CAIC, HQIC)";
  print;
    format 15,8;
    "OP REGRESION";
    miss(cOut.IC_OP, 1000000);
  print;
    if cCtl.mtype ge 2;
        "HOPIT";
        miss(cOut.IC_HOPIT, 1000000);
      print;
    endif;
    
  print;
    if cCtl.mtype ge 2;
        "No. of vignettes used";;
        cCtl.kv;
      print;
        "Vignette names";;
        cCtl.v_varnames;
    endif;
    
    print;
    print;
    "		SIMPLE REGRESSION";
    format 15,4;
    
    print;
    "ESTIMATED PARAMETERS: COEFFICIENTS ";
    
    #ifminkernelversion(20)
        // Surround SE format specifier with parentheses
        sprintf("%12s  %12f", cCtl.x_varnames, cOut.OLS_B);
    #else;
        for i (1, cCtl.kx_struct, 1);
            cCtl.x_varnames[i];;cOut.OLS_B[i, .];
        endfor;
        print;
    #endif;
    
    mu = "mu";
    for (1, cCtl.capJ-2, 1);
        mu = mu$|"mu";
    endfor;
    
    OP_vars = cCtl.x_varnames[2:rows(cCtl.x_varnames)]$|mu;
    
    print;
    print;
    "		SIMPLE ORDERED PROBIT REGRESSION";
    format 15,6;
    
 
    #ifminkernelversion(20)
        print;
        "ESTIMATED PARAMETERS";
        print;
        sprintf("%12s  %12s  (%4s)  %8s",  "", "Coeff.", "S.E.", "Tstat");
        sprintf("%12s  %12.6f  (%3.6f)  %8.6f",  OP_vars, cOut.OP_B[., 1], cOut.OP_B[., 2], cOut.OP_B[., 3]);
    #else;
        print;
            "ESTIMATED PARAMETERS: COEFFICIENT S.E. T-STAT";
        print;
        for i (1, cCtl.kx_struct-1+cCtl.capJ-1, 1);
            OP_vars[i];; cOut.OP_B[i, .];
        endfor;
        print;
    #endif;
        me_lab = "ME_" $+ ntos(seqa(1, 1, cCtl.capJ));
        se_lab = "SE_" $+ ntos(seqa(1, 1, cCtl.capJ));
        
    #ifminkernelversion(20)
        print;
        "ESTIMATED PARTIAL EFFECTS (j=1,...,J; standard errors underneath)";
        print;
        
        sprintf("%12s  %9s",  "Coeff.", me_lab');

        for i(1, cCtl.kx_struct-1, 1);
            sprintf("%12s  %12.6f",  OP_vars[i], cOut.ME_OP[i, .]);
            sprintf("%12s  %12.6f", "", cOut.ME_OP_se[i, .]);  
        endfor;
    #else;
        print;
        "ESTIMATED PARTIAL EFFECTS (j=1,...,J; standard errors underneath)";
        print;
    
        for i (1, cCtl.kx_struct-1, 1);
            OP_vars[i];;
            cOut.ME_OP[i, .];
            "		   ";;
            cOut.ME_OP_se[i, .];
        endfor;
        print;
    #endif;
    
    if cCtl.mtype ge 2;
        
        gama		= cOut.HOPIT_B[cCtl.kx_struct+cCtl.kv+1:cCtl.kx_struct+cCtl.kv+(cCtl.kx_mu*(cCtl.capJ-1)), 1];
        gama	    = reshape(gama, cCtl.capJ-1, cCtl.kx_mu)';
        gama		= vec(gama);
        
        gama_se		= cOut.HOPIT_B[cCtl.kx_struct+cCtl.kv+1:cCtl.kx_struct+cCtl.kv+(cCtl.kx_mu*(cCtl.capJ-1)), 2];
        gama_se		= reshape(gama_se, cCtl.capJ-1, cCtl.kx_mu)';
        gama_se		= vec(gama_se);
        
        gama_t		= cOut.HOPIT_B[cCtl.kx_struct+cCtl.kv+1:cCtl.kx_struct+cCtl.kv+(cCtl.kx_mu*(cCtl.capJ-1)), 3];
        gama_t		= reshape(gama_t, cCtl.capJ-1, cCtl.kx_mu)';
        gama_t		= vec(gama_t);
        
        gama_all	= gama~gama_se~gama_t;
        
        print;
        print;
        "		HOPIT VIGNETTES MODEL";
        format 15,6;
        
        print;
        "LogL";;
        cOut.L_HOPIT;
        print;
        
        #ifminkernelversion(20)
            print;
            "ESTIMATED PARAMETERS";
            print;
            sprintf("%12s  %12s  (%4s)  %8s",  "", "Coeff.", "S.E.", "Tstat");
            sprintf("%12s  %12.6f  (%3.6f)  %8.6f",  cCtl.x_varnames[1:cCtl.kx_struct], cOut.HOPIT_B[1:cCtl.kx_struct, 1], cOut.HOPIT_B[1:cCtl.kx_struct, 2], cOut.HOPIT_B[1:cCtl.kx_struct, 3]);
        #else;
            print;
            "ESTIMATED PARAMETERS: COEFFICIENT S.E. T-STAT";
            print;
            "Structural Parameters";
            print;
        
            for i (1, cCtl.kx_struct, 1);
                cCtl.x_varnames[i];;
                cOut.HOPIT_B[i, .];
            endfor;
            print;
        #endif;
        
        #ifminkernelversion(20)
            print;
            "Vignettes constants";
            print;
            sprintf("%12s  %12s  (%4s)  %8s",  "", "Coeff.", "S.E.", "Tstat");
            sprintf("%12s  %12.6f  (%3.6f)  %8.6f",  cCtl.v_varnames, cOut.HOPIT_B[cCtl.kx_struct+1:cCtl.kx_Struct+cCtl.kv, 1], cOut.HOPIT_B[cCtl.kx_struct+1:cCtl.kx_Struct+cCtl.kv, 2], cOut.HOPIT_B[cCtl.kx_struct+1:cCtl.kx_Struct+cCtl.kv, 3]);
        #else;
            "Vignettes constants";
            print;
        
            for i (1, cCtl.kv, 1);
                cCtl.v_varnames[i];;
                cOut.HOPIT_B[cCtl.kx_struct+i, .];
            endfor;
            print;
        #endif;
        
        #ifminkernelversion(20)
            print;
            "Boundary equations (j=0,...,J)";
            print;
            sprintf("%12s  %9s",  "", "Gama");
            for j (1, cCtl.capJ-1, 1);
                sprintf("%12s  %9.6f", cCtl.x_varnames[1:cCtl.kx_mu], gama_all[(j-1)*cCtl.kx_mu+1:j*cCtl.kx_mu,.]);
            endfor; 
            print;
        #else;
            
        "Boundary equations (j=0,...,J)";
        print;
        
        for j (1, cCtl.capJ-1, 1);
            
            for i (1, cCtl.kx_mu, 1);
                cCtl.x_varnames[i];;
                gama_all[((j-1)*cCtl.kx_mu)+i,.];
            endfor;
            print;
            
        endfor;
        #endif;
        
        if rows(cOut.HOPIT_B) gt cCtl.kx_struct+cCtl.kv+((cCtl.capJ-1)*cCtl.kx_mu);
            
            "	 1/V(sd)";;
            cOut.HOPIT_B[cCtl.kx_struct+cCtl.kv+((cCtl.capJ-1)*cCtl.kx_mu)+1, .];
            print;
            
        endif;
                
        cOut.ME_HOPIT	= delif(cOut.ME_HOPIT, cOut.ME_HOPIT[., 1] .eq 1);
        cOut.ME_HOPIT_se 	= delif(cOut.ME_HOPIT_se, cOut.ME_HOPIT_se[., 1] .eq 1);
        
        print;
        "ESTIMATED PARTIAL EFFECTS (j=1,...,J; standard errors underneath)";
        print;
        
        #ifminkernelversion(20)
       
        sprintf("%12s  %12s",  "Coeff.", me_lab');
        
        for i(1, cCtl.kx_struct, 1);
            sprintf("%12s  %12.6f",  cCtl.x_varnames[i], cOut.ME_HOPIT[i, .]);
            sprintf("%12s  %12.6f", "", cOut.ME_HOPIT_se[i, .]);  
        endfor;
        
        #else;

        for i (1, cCtl.kx_struct, 1);
            cCtl.x_varnames[i];;
            cOut.ME_HOPIT[i, .];
            "		";;
            cOut.ME_HOPIT_se[i, .];
        endfor;
        print;
        #endif;
        
    endif;
endp;

